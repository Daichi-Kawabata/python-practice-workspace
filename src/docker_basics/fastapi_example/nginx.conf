# =============================================================================
# Nginx Configuration for FastAPI Reverse Proxy
# =============================================================================

# 📡 基本設定: ワーカープロセスの接続管理
events {
    # 1つのワーカープロセスが同時に処理できる接続数
    # 1024 = 同時に1024の接続を処理可能（中規模サイト向け）
    worker_connections 1024;
}

# 🌐 HTTP設定ブロック: 全てのHTTP関連設定を含む
http {
    
    # 🎯 アップストリーム定義: バックエンドサーバーのグループ
    upstream fastapi {
        # Docker Composeのサービス名でFastAPIコンテナを指定
        # fastapi-app = サービス名、8000 = FastAPIのポート
        # nginxはDockerネットワーク内でこの名前を解決
        server fastapi-app:8000;
        
        # 💡 追加可能な設定例:
        # server fastapi-app-2:8000;  # 負荷分散用の追加サーバー
        # server fastapi-app-3:8000 backup;  # バックアップサーバー
    }

    # 🏠 サーバーブロック: 仮想ホストの設定
    server {
        # 外部からのHTTP接続をポート80で待機
        listen 80;
        
        # このサーバーが応答するドメイン名
        # localhost = 開発環境用（本番では実際のドメイン名を指定）
        server_name localhost;

        # 🔄 メインのリバースプロキシ設定
        # 全てのリクエスト（/）をFastAPIに転送
        location / {
            # アップストリーム 'fastapi' にリクエストを転送
            proxy_pass http://fastapi;
            
            # 📋 重要なヘッダー情報をFastAPIに転送
            # 元のHostヘッダーを保持（FastAPIが正しいURLを認識）
            proxy_set_header Host $host;
            
            # クライアントの実際のIPアドレスを転送
            # FastAPIでログ記録や制限に使用
            proxy_set_header X-Real-IP $remote_addr;
            
            # プロキシチェーン情報を追加
            # 複数のプロキシを経由する場合の全IPを記録
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # HTTPかHTTPSかの情報を転送
            # FastAPIでリダイレクトURLの生成に使用
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 💡 追加可能な設定例:
            # proxy_connect_timeout 30s;     # バックエンド接続タイムアウト
            # proxy_send_timeout 30s;        # 送信タイムアウト
            # proxy_read_timeout 30s;        # 読み取りタイムアウト
        }

        # 💊 nginx自体のヘルスチェック用エンドポイント
        # Docker ComposeやKubernetesの監視で使用
        location /nginx-health {
            # このエンドポイントのアクセスログを無効化
            # 大量のヘルスチェックでログが汚れるのを防ぐ
            access_log off;
            
            # 常にHTTP 200ステータスで "healthy" を返す
            return 200 "healthy\n";
            
            # レスポンスのContent-Typeを明示的に設定
            add_header Content-Type text/plain;
        }
        
        # 🚫 追加可能な設定例: 静的ファイル配信
        # location /static/ {
        #     # 静的ファイル（CSS、JS、画像など）はnginxで直接配信
        #     # FastAPIを経由しないため高速
        #     alias /var/www/static/;
        #     expires 1d;  # ブラウザキャッシュを1日間有効
        # }
        
        # 🔒 追加可能な設定例: セキュリティヘッダー
        # add_header X-Frame-Options DENY;
        # add_header X-Content-Type-Options nosniff;
        # add_header X-XSS-Protection "1; mode=block";
    }
}
